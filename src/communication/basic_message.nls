
to printcom [com]
  if debug-com [
    print com
  ]
end

to-report create-msg-drone-to-drone [performative from dest content fd-list sujet]
  report aux-create-msg performative from dest content fd-list drones sujet
end


to-report create-msg-convoi-to-convoi [performative from dest content fd-list sujet]
  report aux-create-msg performative from dest content fd-list convois sujet
  
end

to-report create-msg-leader-to-leader-leader [performative from dest content sujet]
  let breed-to [breed] of turtle dest  
  let receivers (breed-to in-cone range 360 with [who = dest])
  let msg create-message performative
  set msg add-multiple-receivers receivers msg
  set msg add-content content msg
  set msg add-field msg "from:" from
  set msg add-field msg "to:" dest
  report msg
end

to-report create-reply-drone-to-drone [msg content from breeds]
  let msg2 create-message "reply-to"
  set msg2 add-receivers breeds (read-from-string item 0 get-field "to" msg) [] msg2
  set msg2 add-content content msg2
  set msg2 add-field msg2 "from:" from
  set msg2 add-field msg2 "to:" item 0 get-field "to" msg
  set msg2 add-field msg2 "sujet:" item 0 get-field "sujet" msg
  report msg2
end

to-report aux-create-msg [performative from dest content fd-list breeds sujet]
  let msg create-message performative
  set msg add-receivers breeds dest  [] msg
  set msg add-content content msg
  set fd-list add-list-to-fw-list (get-receivers msg) fd-list
  set msg add-field msg "from:" from
  set msg add-field msg "to:" dest
  set msg add-field msg "fw-list:" (add-to-fw-list who fd-list)
  set msg add-field msg "fw:" 0
  set msg add-field msg "sujet:" sujet
  report msg

end


to-report add-receivers [breeds dest fwlist msg]
  let id who
  let receivers (breeds in-cone range 360 with [who != id and not member? who fwlist])
  if turtle dest = nobody [report msg]
  ifelse member? turtle dest receivers
  [
    set msg add-receiver dest msg
  ]
  [
    set receivers (sort-on [who] receivers)
    set msg add-multiple-receivers receivers msg
  ]
  report msg
end

to-report add-to-fw-list [element fw-list]
 if is-agent? element [ set element [who] of element ]
 if not member?  element fw-list [set fw-list lput element fw-list]
 report fw-list
end


to-report add-list-to-fw-list [liste fw-list]
  foreach liste [
     let id read-from-string ?
    if not member?  id fw-list [set fw-list lput id fw-list]
    ]

 report fw-list
end


to-report forward-message [breeds msg]
  let msg2 create-message get-performative msg
  let fd-list add-list-to-fw-list (get-receivers msg) read-from-string item 0 get-field "fw-list" msg
  set msg2 add-receivers breeds (read-from-string item 0 get-field "to" msg) fd-list msg2

  set msg2 add-content get-content msg msg2
  set msg2 add-field msg2 "from:" item 0 get-field "from" msg
  set msg2 add-field msg2 "to:" item 0 get-field "to" msg
  set msg2 add-field msg2 "fw-list:" fd-list
  set msg2 add-field msg2 "fw:" ((read-from-string item 0 get-field "fw" msg) + 1)
  report msg2
end


to add-to-forwarded-msg [msg]
  set message-to-forward lput msg message-to-forward
end

to forward-messages
  let tmp message-to-forward
  foreach tmp [
   let msg ?
   set message-to-forward remove msg message-to-forward
   set msg forward-message breed msg
   add-to-forwarded-msg msg
   if not empty? (get-receivers msg) [

     foreach (get-receivers msg) [
       let id read-from-string ?
       if (read-from-string item 0 get-field "to" msg) = id
       [
         set message-to-forward remove msg message-to-forward
         printcom (word "(" breed " " who ")  Remove from forward")
       ]
     ]
     send msg
     printcom (word "(" breed " " who ")  Pour " read-from-string item 0 get-field "to" msg " forward : " msg )
     printcom ""
   ]
  ]
end

to send-message [msg]
  send msg
  printcom (word "(" breed " " who ") envoi  " msg)
end