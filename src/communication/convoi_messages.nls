;to-report create-msg-convoi-to-convoi [performative from dest content fd-list sujet]
to-report msg-split-split [nLeader_id]
  let msg create-msg-convoi-to-convoi "request" who nLeader_id "" [] "split"
  report msg
end

to-report msg-convoi-detect-hostile [zone]
  
  let x int ([pxcor] of zone / zone-size) * zone-size + int (zone-size / 2)
  let y int ([pycor] of zone / zone-size) * zone-size + int (zone-size / 2)
  let z mapAlt
  let dest patch x y z
   if [obstacle?] of dest [
     ;; Si la destination est un obstacle on trouve le patch le plus près qui n'en est pas un
     set dest min-one-of patches with [obstacle? = false and pzcor = mapAlt] [distance dest]
   ]
  let content (list [pxcor] of dest [pycor] of dest [pzcor] of dest)
  
  
 let msg create-msg-convoi-to-convoi "inform" who convoi-leader-id content [] "hostile"
 report msg
end

to-report msg-send-path 
  let msg create-msg-leader-to-leader-leader "inform" who drone-leader-id as-path "path"
  report msg
end



to receive-message-convoi
  if not empty? incoming-queue
  [
    let msg get-message
    let dest read-from-string item 0 get-field "to" msg
    ifelse dest = who
    [
      let perf get-performative msg
      let sub item 0 get-field "sujet" msg
      if perf = "request" and sub = "split" [receive-split-request msg stop]
      if perf = "inform" and sub = "hostile" [receive-split-request msg stop]
    ]
    [
      add-to-forwarded-msg msg
    ]
  ]
end

to receive-split-request [msg]
  let id who 
  let id2 read-from-string item 0 get-field "to" msg 
  ifelse id = id2 
  [ make-leader id ]
  [ printcom (word "(" breed " " who ") ERREUR  receive-split-request " msg) ]
end

to receive-hostile-inform [msg]
  let id who
  let zone get-content msg
  printcom (word "(" breed " " who ") reçu hostile " zone)
end